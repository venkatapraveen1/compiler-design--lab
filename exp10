#include <stdio.h>
#include <string.h>

int main() {
    char gram[20], part1[20], part2[20], modifiedGram[20], newGram[20];
    int i, j = 0, k = 0, pos = 0;

    // Input production
    printf("Enter Production (format: S->A|B): S->");
    fgets(gram, sizeof(gram), stdin);
    gram[strcspn(gram, "\n")] = 0; // Remove newline character

    // Split production into part1 and part2 at '|'
    for (i = 0; gram[i] != '|' && gram[i] != '\0'; i++, j++) 
        part1[j] = gram[i];
    part1[j] = '\0';

    j = 0;
    if (gram[i] == '|') 
        i++; // Move past '|'
    
    for (; gram[i] != '\0'; i++, j++) 
        part2[j] = gram[i];
    part2[j] = '\0';

    // Find common prefix
    for (i = 0; part1[i] == part2[i] && part1[i] != '\0'; i++) {
        modifiedGram[k++] = part1[i];
        pos = i + 1;
    }
    modifiedGram[k++] = 'X'; // Introduce new non-terminal
    modifiedGram[k] = '\0';

    // Create new production for X
    j = 0;
    for (i = pos; part1[i] != '\0'; i++) 
        newGram[j++] = part1[i];
    newGram[j++] = '|';
    for (i = pos; part2[i] != '\0'; i++) 
        newGram[j++] = part2[i];
    newGram[j] = '\0';

    // Print the result
    printf("\nLeft Factored Grammar:\n");
    printf("S -> %s\n", modifiedGram);
    printf("X -> %s\n", newGram);

    return 0;
}
