#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

char ip_sym[15], stack[15];
int ip_ptr = 0, st_ptr = 0, len, i;
char temp[2], temp2[2];
char act[15];

void check();

int main() {
    printf("\n\t\tSHIFT REDUCE PARSER\n");
    printf("\nGRAMMAR:");
    printf("\n E -> E+E");
    printf("\n E -> E/E");
    printf("\n E -> E*E");
    printf("\n E -> a/b");

    // Get input string
    printf("\n\nEnter the input symbol: ");
    fgets(ip_sym, sizeof(ip_sym), stdin);
    ip_sym[strcspn(ip_sym, "\n")] = '\0'; // Remove newline character

    printf("\n\tStack Implementation Table");
    printf("\n---------------------------------------------");
    printf("\nStack\t\tInput Symbol\t\tAction");
    printf("\n---------------------------------------------");
    printf("\n$\t\t%s$\t\t--", ip_sym);

    strcpy(act, "shift ");
    temp[0] = ip_sym[ip_ptr];
    temp[1] = '\0';
    strcat(act, temp);
    len = strlen(ip_sym);

    for (i = 0; i < len; i++) {
        stack[st_ptr] = ip_sym[ip_ptr];
        stack[st_ptr + 1] = '\0';
        ip_sym[ip_ptr] = ' ';
        ip_ptr++;
        printf("\n$%s\t\t%s$\t\t%s", stack, ip_sym, act);

        strcpy(act, "shift ");
        temp[0] = ip_sym[ip_ptr];
        temp[1] = '\0';
        strcat(act, temp);
        check();
        st_ptr++;
    }

    st_ptr++;
    check();

    return 0;
}

void check() {
    int flag = 0;
    temp2[0] = stack[st_ptr];
    temp2[1] = '\0';

    // Check for 'a' or 'b' -> reduce to E
    if (strcmp(temp2, "a") == 0 || strcmp(temp2, "b") == 0) {
        stack[st_ptr] = 'E';
        stack[st_ptr + 1] = '\0';
        printf("\n$%s\t\t%s$\t\tE -> %s", stack, ip_sym, temp2);
        flag = 1;
    }

    // Check for operators
    if (strcmp(temp2, "+") == 0 || strcmp(temp2, "*") == 0 || strcmp(temp2, "/") == 0) {
        flag = 1;
    }

    // Check for E -> E+E, E/E, E*E
    if (strstr(stack, "E+E") != NULL || strstr(stack, "E/E") != NULL || strstr(stack, "E*E") != NULL) {
        strcpy(stack, "E");
        st_ptr = 0;

        if (strstr(stack, "E+E") != NULL) {
            printf("\n$%s\t\t%s$\t\tE -> E+E", stack, ip_sym);
        } else if (strstr(stack, "E/E") != NULL) {
            printf("\n$%s\t\t%s$\t\tE -> E/E", stack, ip_sym);
        } else if (strstr(stack, "E*E") != NULL) {
            printf("\n$%s\t\t%s$\t\tE -> E*E", stack, ip_sym);
        }

        flag = 1;
    }

    // Final acceptance check
    if (strcmp(stack, "E") == 0 && ip_ptr == len) {
        printf("\n$%s\t\t%s$\t\tACCEPT", stack, ip_sym);
        exit(0);
    }

    if (flag == 0) {
        printf("\n$%s\t\t%s$\t\tREJECT", stack, ip_sym);
        exit(0);
    }
}
